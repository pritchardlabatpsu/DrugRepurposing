res.LFC = lfcShrink(DDS, coef="condition_SF3B1.mut_vs_WT", type="apeglm")
plotMA(res.LFC)
plot(res.LFC$log2FoldChange,-log10(res.LFC$padj))
plotMA(res.LFC)
plot(res.LFC$log2FoldChange,-log10(res.LFC$padj))
hist(res.LFC$log2FoldChange)
View(res.LFC)
hist(res.LFC$padj)
results(DDS)
?lfcShrink
# Let's try the LFCShrink approach
res.LFC = lfcShrink(DDS, type="apeglm")
# Let's try the LFCShrink approach
res.LFC = lfcShrink(DDS,DDS.res,type="apeglm")
# Let's try the LFCShrink approach
res.LFC = lfcShrink(DDS,res=DDS.res,type="apeglm")
# Let's try the LFCShrink approach
res.LFC = lfcShrink(DDS,coef="condition_SF3B1.mut_vs_WT",type="apeglm")
plotMA(res.LFC)
cnts.mrgd = readRDS("cnts.mrgd_unfltrd.RDS")
# Subset count data frame
cnts.cln = cnts.mrgd[,grepl("count",colnames(cnts.mrgd))]
rownames(cnts.cln) = cnts.mrgd$GRange
## Ensure that sample name and order is consistent across two data frames
# Column names of count data frame
colnames(cnts.cln) = gsub("count\\.","",colnames(cnts.cln))
# Row names of sample data frame
rownames(smpls.df) = gsub("\\.junctions.bed","",smpls.df$Derived.Array.Data.File)
all(rownames(smpls.df) == colnames(cnts.cln)) # TRUE - correct names and order
# Designate samples as SF mutated
smpls.df$condition = "WT"
smpls.df$condition[smpls.df$Characteristics.genotype.!="wild type genotype"] = "SF3B1.mut"
smpls.df$condition = factor(smpls.df$condition,
levels=c("WT","SF3B1.mut"))
## Run DESeq2
dds = DESeqDataSetFromMatrix(countData = cnts.cln,
colData = smpls.df,
design = ~ condition)
DDS = DESeq(dds)
# Remove junctions without counts in at least 3 samples
cnts.mrgd$n.samples = rowSums(cnts.mrgd[,grepl("count",colnames(cnts.mrgd))]>0)
cnts.mrgd = cnts.mrgd[cnts.mrgd$n.samples>=3,]
# Subset count data frame
cnts.cln = cnts.mrgd[,grepl("count",colnames(cnts.mrgd))]
rownames(cnts.cln) = cnts.mrgd$GRange
## Ensure that sample name and order is consistent across two data frames
# Column names of count data frame
colnames(cnts.cln) = gsub("count\\.","",colnames(cnts.cln))
# Row names of sample data frame
rownames(smpls.df) = gsub("\\.junctions.bed","",smpls.df$Derived.Array.Data.File)
all(rownames(smpls.df) == colnames(cnts.cln)) # TRUE - correct names and order
# Designate samples as SF mutated
smpls.df$condition = "WT"
smpls.df$condition[smpls.df$Characteristics.genotype.!="wild type genotype"] = "SF3B1.mut"
smpls.df$condition = factor(smpls.df$condition,
levels=c("WT","SF3B1.mut"))
## Run DESeq2
dds = DESeqDataSetFromMatrix(countData = cnts.cln,
colData = smpls.df,
design = ~ condition)
DDS = DESeq(dds)
DDS.res = results(DDS,alpha=0.05)
res.ordrd = DDS.res[order(DDS.res$padj),]
# save(file="DESeqResults.RData") # Save data
# Let's try the LFCShrink approach
res.LFC = lfcShrink(DDS,coef="condition_SF3B1.mut_vs_WT",type="apeglm")
plot(res.LFC$log2FoldChange,-log10(res.LFC$padj))
plotMA(res.LFC)
plot(res.LFC$log2FoldChange,-log10(res.LFC$padj))
plot(DDS.res$log2FoldChange,-log10(DDS.res$padj))
plotMA(DDS.res)
DDS.res$hits = DDS.res$padj<=0.05 & abs(DDS.res$log2FoldChange)>2
View(DDS.res)
DDS.res$baseMean
rownames(DDS.res)
DDS.res
View(cnts.mrgd)
View(cnts.cln)
# Subset counts matrix on hits
all(rownames(cnts.cln)==rownames(DDS.res))
cnts.sub = cnts.cln[DDS.res$hits,] # Subset on hits
View(cnts.sub)
DDS.res$hits
DDS.res$padj<=0.05
DDS.res$padj
# Identify hits from DESeq2
DDS.res$hits = DDS.res$padj<=0.05 & abs(DDS.res$log2FoldChange)>2
DDS.res$hits[is.na(DDS.res$hits)] = F
# Subset counts matrix on hits
all(rownames(cnts.cln)==rownames(DDS.res)) # TRUE - row names agree
cnts.sub = cnts.cln[DDS.res$hits,] # Subset on hits
# Plot clustered heatmap
mat = as.matrix(cnts.sub)
View(mat)
SF.status = smpls.df$condition
SF.status
ha = HeatmapAnnotation(
df = data.frame(type = SF.status),
annotation_height = unit(4, "mm")
)
BiocManager::install("ComplexHeatmap")
library("ComplexHeatmap")
ha = HeatmapAnnotation(
df = data.frame(type = SF.status),
annotation_height = unit(4, "mm")
)
Heatmap(mat, name = "expression", km = 5, top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE) +
Heatmap(expr$length, name = "length", width = unit(5, "mm"),
col = circlize::colorRamp2(c(0, 100000), c("white", "orange"))) +
Heatmap(expr$type, name = "type", width = unit(5, "mm")) +
Heatmap(expr$chr, name = "chr", width = unit(5, "mm"),
col = circlize::rand_color(length(unique(expr$chr))))
Heatmap(mat, name = "expression", km = 5, top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE) +
Heatmap(expr$type, name = "type", width = unit(5, "mm"))
Heatmap(mat, name = "expression", km = 5, top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)
# Identify hits from DESeq2
DDS.res$hits = DDS.res$padj<=0.05 & abs(DDS.res$log2FoldChange)>10
# Identify hits from DESeq2
DDS.res$hits = DDS.res$padj<=0.05 & abs(DDS.res$log2FoldChange)>10
DDS.res$hits[is.na(DDS.res$hits)] = F
# Subset counts matrix on hits
all(rownames(cnts.cln)==rownames(DDS.res)) # TRUE - row names agree
cnts.sub = cnts.cln[DDS.res$hits,] # Subset on hits
mat = as.matrix(cnts.sub)
SF.status = smpls.df$condition
ha = HeatmapAnnotation(
df = data.frame(type = SF.status),
annotation_height = unit(4, "mm")
)
Heatmap(mat, name = "expression", km = 5, top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)
plot(DDS.res$log2FoldChange[DDS.res$hits],DDS.res$padj[DDS.res$hits])
plot(DDS.res$log2FoldChange[DDS.res$hits],-log10(DDS.res$padj[DDS.res$hits]))
# Identify hits from DESeq2
DDS.res$hits = DDS.res$padj<=0.05 & abs(DDS.res$log2FoldChange)>20
DDS.res$hits[is.na(DDS.res$hits)] = F
plot(DDS.res$log2FoldChange[DDS.res$hits],-log10(DDS.res$padj[DDS.res$hits]))
# Subset counts matrix on hits
all(rownames(cnts.cln)==rownames(DDS.res)) # TRUE - row names agree
cnts.sub = cnts.cln[DDS.res$hits,] # Subset on hits
mat = as.matrix(cnts.sub)
mat = as.matrix(cnts.sub)
SF.status = smpls.df$condition
ha = HeatmapAnnotation(
df = data.frame(type = SF.status),
annotation_height = unit(4, "mm")
)
Heatmap(mat, name = "expression", km = 5, top_annotation = ha,
show_row_names = FALSE, show_column_names = FALSE)
rm(list=ls())
load("DESeqResults.RData")
load("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/SF3B1/AlsafadiDataTest/DESeqResults.RData")
DDS
x=load("~/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/SF3B1/AlsafadiDataTest/DESeqResults.RData")
save.image(file="DESeqResults.RData") # Save data
rm(list=ls())
load("DESeqResults.RData")
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dplyr)
library(DESeq2)
# Import sample meta-data
smpls.df = read.table("SampleData.sdrf.txt",sep="\t",header=T,stringsAsFactors=F)
smpls.df = smpls.df[1:10,]
# Import count data
cnts.mrgd = readRDS("cnts.mrgd.RDS")
# Remove junctions without counts in at least 3 samples
cnts.mrgd$n.samples = rowSums(cnts.mrgd[,grepl("count",colnames(cnts.mrgd))]>0)
cnts.mrgd = cnts.mrgd[cnts.mrgd$n.samples>=3,]
# Remove junctions without at least 10 counts in at least 1 sample
cnts.mrgd$max.reads = apply(cnts.mrgd[,grepl("count",colnames(cnts.mrgd))], 1, max)
cnts.mrgd = cnts.mrgd[cnts.mrgd$max.reads>=10,]
# Subset count data frame
cnts.cln = cnts.mrgd[,grepl("count",colnames(cnts.mrgd))]
rownames(cnts.cln) = cnts.mrgd$GRange
## Ensure that sample name and order is consistent across two data frames
# Column names of count data frame
colnames(cnts.cln) = gsub("count\\.","",colnames(cnts.cln))
# Row names of sample data frame
rownames(smpls.df) = gsub("\\.junctions.bed","",smpls.df$Derived.Array.Data.File)
all(rownames(smpls.df) == colnames(cnts.cln)) # TRUE - correct names and order
# Designate samples as SF mutated
smpls.df$condition = "WT"
smpls.df$condition[smpls.df$Characteristics.genotype.!="wild type genotype"] = "SF3B1.mut"
smpls.df$condition = factor(smpls.df$condition,
levels=c("WT","SF3B1.mut"))
## Run DESeq2
dds = DESeqDataSetFromMatrix(countData = cnts.cln,
colData = smpls.df,
design = ~ condition)
all(rownames(smpls.df) == colnames(cnts.cln)) # TRUE - correct names and order
# Import sample meta-data
smpls.df = read.table("SampleData.sdrf.txt",sep="\t",header=T,stringsAsFactors=F)
# Row names of sample data frame
rownames(smpls.df) = gsub("\\.junctions.bed","",smpls.df$Derived.Array.Data.File)
all(rownames(smpls.df) == colnames(cnts.cln)) # TRUE - correct names and order
# Subset count data frame
cnts.cln = cnts.mrgd[,grepl("count",colnames(cnts.mrgd))]
rownames(cnts.cln) = cnts.mrgd$GRange
## Ensure that sample name and order is consistent across two data frames
# Column names of count data frame
colnames(cnts.cln) = gsub("count\\.","",colnames(cnts.cln))
# Row names of sample data frame
rownames(smpls.df) = gsub("\\.junctions.bed","",smpls.df$Derived.Array.Data.File)
all(rownames(smpls.df) == colnames(cnts.cln)) # TRUE - correct names and order
# Designate samples as SF mutated
smpls.df$condition = "WT"
smpls.df$condition[smpls.df$Characteristics.genotype.!="wild type genotype"] = "SF3B1.mut"
smpls.df$condition = factor(smpls.df$condition,
levels=c("WT","SF3B1.mut"))
## Run DESeq2
dds = DESeqDataSetFromMatrix(countData = cnts.cln,
colData = smpls.df,
design = ~ condition)
DDS = DESeq(dds)
DDS.res = results(DDS,alpha=0.05)
res.ordrd = DDS.res[order(DDS.res$padj),]
save.image(file="DESeqResults.RData") # Save data
plot(DDS.res$log2FoldChange,-log10(DDS.res$padj))
plotMA(DDS.res)
# Let's try the LFCShrink approach
res.LFC = lfcShrink(DDS,coef="condition_SF3B1.mut_vs_WT",type="apeglm")
# Let's try the LFCShrink approach
res.LFC = lfcShrink(DDS,coef="condition_SF3B1.mut_vs_WT",type="apeglm")
plot(res.LFC$log2FoldChange,-log10(res.LFC$padj))
plotMA(res.LFC)
summary(rowSums((counts(cnts.cln) > 10)) >= 10)
rowSums((counts(cnts.cln) > 10)) >= 10
summary(rowSums((counts(DDS) > 10)) >= 10)
mean(rowSums(cnts.cln)>=10)
# Or try manually removing low counts
keep = rowSums(counts(DDS)) >= 10
mean(keep)
rowSums(counts(DDS))
### ROCs for Binary Classifiers of Resistance ###
## Set up
library(pROC)
library(ggplot2)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Import and clean data
alpha.df = read.csv(file="../../../ReferenceFiles/AlphaValues_True_positive.csv",header=TRUE,stringsAsFactors=FALSE)
# Filter for drug/variant combinations with high confidence (i.e. those with >1 cases)
alpha.df = alpha.df[alpha.df$Actual_Clinical%in%c(0,1),]
alpha.df$Actual_Clinical = as.logical(as.numeric(alpha.df$Actual_Clinical))
# Calculate shift in IC50 over WT
for (drug in unique(alpha.df$drug)) {
drug.rows = alpha.df$drug == drug
alpha.df$IC50.shift[drug.rows] = alpha.df$IC50[drug.rows]/alpha.df$IC50[drug.rows&alpha.df$genotype=="WT"]
}
## Build and plot ROC curves
roc.PPB = roc(alpha.df$Actual_Clinical,alpha.df$free.alpha,
direction=">",levels=c(F,T))
roc.shf = roc(alpha.df$Actual_Clinical,alpha.df$IC50.shift,
direction="<",levels=c(F,T))
roc.eff = roc(alpha.df$Actual_Clinical,alpha.df$eff.alpha,
direction=">",levels=c(F,T))
# Plot features
PPB.col = "#ff5a5f"
shf.col = "#f5a300"
eff.col = "#087e8b"
cmmn.theme =   theme(
plot.title = element_text(size=20,face="bold",hjust=0.5),
axis.title = element_text(size=18,face="bold"),
axis.text = element_text(size=14,color="black"),
legend.title = element_text(size=12,face="bold"),
legend.title.align = 0.5,
legend.text = element_text(size=8,face="bold"),
legend.position = c(.75,.25),
legend.background = element_rect(color="black",fill="gray95"),
legend.key = element_rect(color="black")
)
# Plot ROC: IC50 fold-change and free alpha
ggroc(list(roc.shf,roc.PPB),size=2)+theme_bw()+
geom_segment(aes(x = 0, xend = 1, y = 1, yend = 0), color="darkgrey", linetype="dashed",size=2)+
scale_color_manual("Predictor",labels=c("IC50 Fold Change","Free Alpha"),values=c(shf.col,PPB.col))+
xlab("Specificity")+ylab("Sensitivity")+
ggtitle("ROC Curves of\nDrug Kill Rate Classifiers")+
geom_label(aes(x=0.7,y=0.55,label=paste("AUC =",sprintf("%.2f",round(roc.shf$auc,2)))),size=6,color=shf.col)+
geom_label(aes(x=0.7,y=0.20,label=paste("AUC =",sprintf("%.2f",round(roc.PPB$auc,2)))),size=6,color=PPB.col)+
cmmn.theme
# ggsave("FreeAlpha_IC50FoldChange_ROCCurve.png",width=5,height=5)
# Plot ROC: IC50 fold-change, free and effective alphas
ggroc(list(roc.eff,roc.shf,roc.PPB),size=2)+theme_bw()+
geom_segment(aes(x = 0, xend = 1, y = 1, yend = 0), color="darkgrey", linetype="dashed",size=2)+
scale_color_manual("Predictor",labels=c("Effective Alpha","IC50 Fold Change","Free Alpha"),values=c(eff.col,shf.col,PPB.col))+
xlab("Specificity")+ylab("Sensitivity")+
ggtitle("ROC Curves of\nDrug Kill Rate Classifiers")+
geom_label(aes(x=0.85,y=0.85,label=paste("AUC =",sprintf("%.2f",round(roc.eff$auc,2)))),size=6,color=eff.col)+
geom_label(aes(x=0.67,y=0.57,label=paste("AUC =",sprintf("%.2f",round(roc.shf$auc,2)))),size=6,color=shf.col)+
geom_label(aes(x=0.25,y=0.5,label=paste("AUC =",sprintf("%.2f",round(roc.PPB$auc,2)))),size=6,color=PPB.col)+
cmmn.theme
# ggsave("ThreeClassifier_ROCCurve.png",width=5,height=5)
# Plot ROC: effective alphas
ggroc(list(roc.eff),size=2)+theme_bw()+
geom_segment(aes(x = 0, xend = 1, y = 1, yend = 0), color="darkgrey", linetype="dashed",size=2)+
scale_color_manual("Predictor",labels=c("Effective Alpha"),values=c(eff.col,shf.col,PPB.col))+
xlab("Specificity")+ylab("Sensitivity")+
ggtitle("ROC Curves of\nDrug Kill Rate Classifier")+
geom_label(aes(x=0.85,y=0.85,label=paste("AUC =",sprintf("%.2f",round(roc.eff$auc,2)))),size=6,color=eff.col)+
cmmn.theme
# Plot ROC: effective alphas
ggroc(list(roc.eff),size=2)+theme_bw()+
geom_segment(aes(x = 0, xend = 1, y = 1, yend = 0), color="darkgrey", linetype="dashed",size=2)+
scale_color_manual("Predictor",labels=c("Effective Alpha"),values=c(eff.col,shf.col,PPB.col))+
xlab("Specificity")+ylab("Sensitivity")+
ggtitle("ROC Curves of\nDrug Kill Rate Classifier")+
geom_label(aes(x=0.65,y=0.65,label=paste("AUC =",sprintf("%.2f",round(roc.eff$auc,2)))),size=6,color=eff.col)+
cmmn.theme
# Plot ROC: effective alphas
ggroc(list(roc.eff),size=2)+theme_bw()+
geom_segment(aes(x = 0, xend = 1, y = 1, yend = 0), color="darkgrey", linetype="dashed",size=2)+
scale_color_manual("Predictor",labels=c("Effective Alpha"),values=c(eff.col,shf.col,PPB.col))+
xlab("Specificity")+ylab("Sensitivity")+
ggtitle("ROC Curves of\nDrug Kill Rate Classifier")+
geom_label(aes(x=0.75,y=0.75,label=paste("AUC =",sprintf("%.2f",round(roc.eff$auc,2)))),size=6,color=eff.col)+
cmmn.theme
# Plot ROC: effective alphas
ggroc(list(roc.eff),size=2)+theme_bw()+
geom_segment(aes(x = 0, xend = 1, y = 1, yend = 0), color="darkgrey", linetype="dashed",size=2)+
scale_color_manual("Predictor",labels=c("Effective Drug\nKill Rate"),values=c(eff.col,shf.col,PPB.col))+
xlab("Specificity")+ylab("Sensitivity")+
ggtitle("ROC Curves of\nDrug Kill Rate Classifier")+
geom_label(aes(x=0.75,y=0.75,label=paste("AUC =",sprintf("%.2f",round(roc.eff$auc,2)))),size=6,color=eff.col)+
cmmn.theme
ggsave("ThreeClassifier_EffAlpha.png",width=5,height=5)
## Predicting Resistance from Logistic Regression Models ##
## Set up
library(ggplot2)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Load and clean files
# Load in models (see ResistanceLogisticRegression file)
mdls = readRDS("LogisticRegressionModels.rds")
# Load in data
alpha.df = read.csv("../../ReferenceFiles/AlphaValues_True_positive.csv",header=T,stringsAsFactors=F)
# Filter for drug/variant combinations with high confidence (i.e. those with >1 cases)
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical==0] = F
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical==1] = T
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical=="N"] = NA
## Predict resistance
# Classification from best model (eff.alpha chosen based on AIC, BIC, LOOCV and for parsimony)
mdl = mdls$eff.alpha
alpha.df$pred.response = predict(mdl,
newdata=list(eff.alpha=alpha.df$eff.alpha),
type="response")
alpha.df$pred.clinical = alpha.df$pred.response>=0.5
alpha.df$correct.pred = alpha.df$Actual_Clinical==alpha.df$pred.clinical
# Find threshold for eff.alpha that gives probability of resistance = 0.5 (cutoff value)
eff.alpha.vec = seq(min(alpha.df$eff.alpha),max(alpha.df$eff.alpha),by=0.01)
log.pred = predict(mdl,
newdata=list(eff.alpha=eff.alpha.vec),
type="response")
thrshld = eff.alpha.vec[log.pred<=0.5][1] # threshold at eff.alpha = 0.44
# What is the associated imatinib concentration for this kill rate?
t.assay = 3 # duration of assay [days]
y.thrshld = exp(-thrshld*t.assay)
IC50 = alpha.df$IC50[alpha.df$drug=="Imatinib"&alpha.df$genotype=="WT"]
hill = alpha.df$hill[alpha.df$drug=="Imatinib"&alpha.df$genotype=="WT"]
dose.thrshld = IC50*(1/y.thrshld-1)^(1/hill) # effective dose must be >= 281 nM to target WT ABL
# What are the TPR and TNR?
sub.df = alpha.df[!is.na(alpha.df$Actual_Clinical),] # subset on drug/variant combos where clinical data are available
sub.df$Actual_Clinical = as.logical(sub.df$Actual_Clinical)
TPR = sum(sub.df$Actual_Clinical&sub.df$pred.clinical)/sum(sub.df$Actual_Clinical) # 90.3% sensitive
TNR = sum(!sub.df$Actual_Clinical&!sub.df$pred.clinical)/sum(!sub.df$Actual_Clinical) # 84.2% specific
## Plot results
# Order drugs and genotypes
alpha.df$drug = factor(alpha.df$drug,levels=c("Imatinib","Nilotinib","Dasatinib","Bosutinib","Ponatinib"))
vars = unique(alpha.df$genotype)
vars = vars[vars!="WT"]
vars = vars[order(substr(vars,2,5))]
alpha.df$genotype = factor(alpha.df$genotype,levels=rev(c("WT",vars)))
alpha.df$correct.pred[is.na(alpha.df$correct.pred)] = "NA"
alpha.df$correct.pred = factor(alpha.df$correct.pred,levels=c("TRUE","FALSE","NA"))
alpha.df$resistant.str = ifelse(alpha.df$Actual_Clinical,"(R)","(S)")
ggplot(alpha.df,aes(x=drug,y=genotype,fill=correct.pred))+theme_minimal()+
geom_tile(color="black",size=1.25)+
geom_text(aes(label=paste(resistant.str,sprintf("%.2f",eff.alpha))),size=5)+
xlab("Drug")+ylab("Genotype")+
ggtitle("Predicted Clinical Outcomes: ABL")+
scale_fill_manual("Predicted",
labels = c("Correct","Incorrect","NA"),
values=c("#00a7e1","#ff4b33","#dedede"))+
theme(
plot.title = element_text(size=20,face="bold",hjust=0.5),
axis.title = element_text(size=18,face="bold"),
axis.text = element_text(size=14,color="black",face="bold"),
legend.title = element_blank(),
legend.text = element_text(size=14,face="bold"),
legend.position = "bottom"
)
# ggsave("ABLHeatMap.png",height=12,width=8)
### Predict Resistance using free Cave
# Clear environment
rm(list=ls())
# Load and clean files
# Load in models (see ResistanceLogisticRegression file)
mdls = readRDS("LogisticRegressionModels.rds")
# Load in data
alpha.df = read.csv("../../ReferenceFiles/AlphaValues_True_positive.csv",header=T,stringsAsFactors=F)
# Filter for drug/variant combinations with high confidence (i.e. those with >1 cases)
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical==0] = F
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical==1] = T
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical=="N"] = NA
# Classification from free Cave model
mdl = mdls$free.alpha
alpha.df$pred.response = predict(mdl,
newdata=list(free.alpha=alpha.df$free.alpha),
type="response")
alpha.df$pred.clinical = alpha.df$pred.response>=0.5
alpha.df$correct.pred = alpha.df$Actual_Clinical==alpha.df$pred.clinical
# Find threshold for eff.alpha that gives probability of resistance = 0.5 (cutoff value)
free.alpha.vec = seq(min(alpha.df$free.alpha),max(alpha.df$free.alpha),by=0.01)
log.pred = predict(mdl,
newdata=list(free.alpha=free.alpha.vec),
type="response")
thrshld = free.alpha.vec[log.pred<=0.5][1] # threshold at free.alpha near 0
# What is the associated imatinib concentration for this kill rate?
t.assay = 3 # duration of assay [days]
y.thrshld = exp(-thrshld*t.assay)
IC50 = alpha.df$IC50[alpha.df$drug=="Imatinib"&alpha.df$genotype=="WT"]
hill = alpha.df$hill[alpha.df$drug=="Imatinib"&alpha.df$genotype=="WT"]
dose.thrshld = IC50*(1/y.thrshld-1)^(1/hill) # effective dose must be >= 281 nM to target WT ABL
# What are the TPR and TNR?
sub.df = alpha.df[!is.na(alpha.df$Actual_Clinical),] # subset on drug/variant combos where clinical data are available
sub.df$Actual_Clinical = as.logical(sub.df$Actual_Clinical)
TPR = sum(sub.df$Actual_Clinical&sub.df$pred.clinical)/sum(sub.df$Actual_Clinical) # 90.3% sensitive
TNR = sum(!sub.df$Actual_Clinical&!sub.df$pred.clinical)/sum(!sub.df$Actual_Clinical) # 84.2% specific
## Plot results
# Order drugs and genotypes
alpha.df$drug = factor(alpha.df$drug,levels=c("Imatinib","Nilotinib","Dasatinib","Bosutinib","Ponatinib"))
vars = unique(alpha.df$genotype)
vars = vars[vars!="WT"]
vars = vars[order(substr(vars,2,5))]
alpha.df$genotype = factor(alpha.df$genotype,levels=rev(c("WT",vars)))
alpha.df$correct.pred[is.na(alpha.df$correct.pred)] = "NA"
alpha.df$correct.pred = factor(alpha.df$correct.pred,levels=c("TRUE","FALSE","NA"))
alpha.df$resistant.str = ifelse(alpha.df$Actual_Clinical,"(R)","(S)")
ggplot(alpha.df,aes(x=drug,y=genotype,fill=correct.pred))+theme_minimal()+
geom_tile(color="black",size=1.25)+
geom_text(aes(label=paste(resistant.str,sprintf("%.2f",eff.alpha))),size=5)+
xlab("Drug")+ylab("Genotype")+
ggtitle("Free Cave Predicted Clinical Outcomes")+
scale_fill_manual("Predicted",
labels = c("Correct","Incorrect","NA"),
values=c("#00a7e1","#ff4b33","#dedede"))+
theme(
plot.title = element_text(size=20,face="bold",hjust=0.5),
axis.title = element_text(size=18,face="bold"),
axis.text = element_text(size=14,color="black",face="bold"),
legend.title = element_blank(),
legend.text = element_text(size=14,face="bold"),
legend.position = "bottom"
)
# ggsave("ABLHeatMap_Free.png",height=12,width=8)
## Plot logistic regression for free Cave model
rm(list=ls())
# Load in models (see ResistanceLogisticRegression file)
mdls = readRDS("LogisticRegressionModels.rds")
# Load in data
alpha.df = read.csv("../../ReferenceFiles/AlphaValues_True_positive.csv",header=T,stringsAsFactors=F)
# Filter for drug/variant combinations with high confidence (i.e. those with >1 cases)
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical==0] = F
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical==1] = T
alpha.df$Actual_Clinical[alpha.df$Actual_Clinical=="N"] = NA
# Classification from free alpha model
mdl = mdls$free.alpha
alpha.df$pred.response = predict(mdl,
newdata=list(free.alpha=alpha.df$free.alpha),
type="response")
alpha.df$pred.clinical = alpha.df$pred.response>=0.5
alpha.df$correct.pred = alpha.df$Actual_Clinical==alpha.df$pred.clinical
free.alpha.vec = seq(0,1.25,by=0.01)
log.pred = predict(mdl,
newdata=list(free.alpha=free.alpha.vec),
type="response")
thrshld = free.alpha.vec[log.pred<=0.5][1] # threshold at free.alpha = 0
thrshld
free.alpha.vec
free.alpha.vec = seq(0,1.25,by=0.001)
log.pred = predict(mdl,
newdata=list(free.alpha=free.alpha.vec),
type="response")
thrshld = free.alpha.vec[log.pred<=0.5][1] # threshold at free.alpha = 0
free.mdl = data.frame(free.alpha = free.alpha.vec,
log.pred = log.pred)
ggplot()+theme_bw()+
geom_line(data=free.mdl,aes(x=free.alpha,y=log.pred),
size=2,color="#ff5a5f")+
geom_point(data=alpha.df[!is.na(alpha.df$Actual_Clinical),],
aes(x=free.alpha,y=as.numeric(as.logical(Actual_Clinical)),color=as.logical(Actual_Clinical)),
size=5,alpha=0.7)+
ggtitle("Logistic Model:\nFree Cave Alpha")+
xlab("Free Cave Alpha")+
ylab("Predicted Response")+
scale_color_manual("Clinical\nPhenotype",
labels = c("Sensitive","Resistant"),
values=c("#C0D1D8","#4E707E"))+
scale_x_continuous(breaks=c(0,0.5,1))+
scale_y_continuous(breaks=c(0,0.5,1))+
theme(
plot.title = element_text(size=24,face="bold",hjust=0.5),
axis.title = element_text(size=20,face="bold",color="black"),
axis.text = element_text(size=16,face="bold",color="black"),
legend.title = element_text(size=18,face="bold",hjust=0.5),
legend.text = element_text(size=14,face="bold")
)
thrshld
log.pred
